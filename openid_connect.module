<?php

/**
 * @file
 * OpenID Connect client implementation.
 */

define('OPENID_CONNECT_GOOGLE_CLIENT_ID', '954801329498-5akdmhupetm4c1q06olplo4uqps183ka.apps.googleusercontent.com');
define('OPENID_CONNECT_GOOGLE_CLIENT_SECRET', 'OqkuQcWQ25_4ADGKIpY43j_n');
define('OPENID_CONNECT_GOOGLE_OAUTH2_SERVER_BASE_URI', 'https://accounts.google.com/o/oauth2');
define('OPENID_CONNECT_GOOGLE_REDIRECT_URI', 'oauth2callback');

/**
 * Implements hook_menu().
 */
function openid_connect_menu() {
  $items = array();
  $items[OPENID_CONNECT_GOOGLE_REDIRECT_URI] = array(
    'title' => 'OpenID Connect redirect page',
    'page callback' => 'openid_connect_redirect_page',
    'access callback' => 'openid_connect_redirect_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openid_connect_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openid_connect') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openid_connect_ctools_plugin_type() {
  $plugins['openid_connect_client'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Returns the available OpenID Connect client plugins.
 */
function commerce_license_billing_get_plugins($type) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('openid_connect_client', $type);
  foreach ($plugins as $key => $plugin) {
    if (!class_exists($plugin['class'])) {
      // Invalid class specified.
      unset($plugins[$key]);
      continue;
    }
  }
  uasort($plugins, 'ctools_plugin_sort');
  return $plugins;
}

/**
 * Implements hook_block_info().
 */
function openid_connect_block_info() {
  return array(
    'google_login' => array(
      'info' => t('Log in with Google'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function openid_connect_block_view($delta = '') {
  if ($delta == 'google_login') {
    return array(
      'subject' => t('Testing OpenID Connect'),
      'content' => drupal_get_form('openid_connect_login_form'),
    );
  }
}

/**
 * Form builder: Log in with Google form.
 */
function openid_connect_login_form($form, &$form_state) {
  $form['google_login'] = array(
    '#type' => 'submit',
    '#value' => t('Log in with Google'),
  );
  return $form;
}

/**
 * Form submit handler: Log in with Google form.
 */
function openid_connect_login_form_submit(&$form, &$form_state) {
  // Create a state token to prevent request forgery. Store it in the session
  // for later validation.
  $state = md5(rand());
  $_SESSION['openid_connect_state'] = $state;

  $url_options = array(
    'query' => array(
      'client_id' => OPENID_CONNECT_GOOGLE_CLIENT_ID,
      'response_type' => 'code',
      'scope' => 'openid email',
      'redirect_uri' => url(OPENID_CONNECT_GOOGLE_REDIRECT_URI, array('absolute' => TRUE)),
      'state' => $state,
    ),
  );
  $request_url = url(OPENID_CONNECT_GOOGLE_OAUTH2_SERVER_BASE_URI . '/auth', $url_options);
  $response = drupal_http_request($request_url);
  if ($response->code == 200 && isset($response->redirect_url)) {
    drupal_goto($response->redirect_url);
  }
  else {
    // @todo Do a more granular error check.
    drupal_set_message('The Google sign in could not be completed due to an error.');
  }
}

/**
 * Access callback: Redirect page.
 */
function openid_connect_redirect_access() {
  // Confirm anti-forgery state token. This round-trip verification helps to
  // ensure that the user, not a malicious script, is making the request.
  return $_GET['state'] == $_SESSION['openid_connect_state'];
}

/**
 * Page callback: Redirect page.
 */
function openid_connect_redirect_page() {
  // @todo Validate if parameters URI parameters are available.
  // Exchange `code` for access token and ID token.
  $post_data = array(
    'code' => $_GET['code'],
    'client_id' => OPENID_CONNECT_GOOGLE_CLIENT_ID,
    'client_secret' => OPENID_CONNECT_GOOGLE_CLIENT_SECRET,
    'redirect_uri' => url(OPENID_CONNECT_GOOGLE_REDIRECT_URI, array('absolute' => TRUE)),
    'grant_type' => 'authorization_code',
  );
  $request_options = array(
    'method' => 'POST',
    'data' => drupal_http_build_query($post_data),
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $url_options = array(
    'external' => TRUE,
  );
  $request_url = url(OPENID_CONNECT_GOOGLE_OAUTH2_SERVER_BASE_URI . '/token', $url_options);
  $response = drupal_http_request($request_url, $request_options);
  // @todo Make sure request was successful.

  // Obtain user information from the ID token.
  // @todo Do this properly by retrieving Googleâ€™s public keys and performing
  // the validation locally.
  $response_data = drupal_json_decode($response->data);
  $url_options = array(
    'query' => array(
      'id_token' => $response_data['id_token'],
    ),
    'external' => TRUE,
  );
  $request_url = url('https://www.googleapis.com/oauth2/v1/tokeninfo', $url_options);
  $response = drupal_http_request($request_url);
  // @todo Make sure request was successful.
  $response_data = drupal_json_decode($response->data);
  openid_connect_login_user($response_data['email']);
  return t('Hello !email_address!', array('!email_address' => $response_data['email']));
}

/**
 * Logs in a user based on their email address.
 */
function openid_connect_login_user($email) {
  $account = user_load_by_mail($email);
  if (!$account) {
    $account = openid_connect_create_user($email);
  }
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
}

/**
 * Creates a user simply using an email address.
 */
function openid_connect_create_user($email) {
  $edit = array(
    'name' => $email,
    'mail' => $email,
    'status' => 1,
    'openid_connect_google' => TRUE,
  );
  $account = user_save(NULL, $edit);
  return $account;
}

/**
 * Implements hook_user_insert().
 */
function openid_connect_user_insert(&$edit, &$account, $category) {
  if (isset($edit['openid_connect_google'])) {
    user_set_authmaps($account, array('authname_openid_connect_google' => $edit['name']));
  }
}

/**
 * Implements hook_user_delete().
 */
function openid_connect_user_delete($account) {
  user_set_authmaps($account, array('authname_openid_connect_google' => FALSE));
}

/**
 * Implements hook_user_cancel().
 */
function openid_connect_user_cancel($edit, $account, $method) {
  user_set_authmaps($account, array('authname_openid_connect_google' => FALSE));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openid_connect_form_user_profile_form_alter(&$form, &$form_state) {
  if (isset($form['account'])) {
    $account_form = &$form['account'];
  }
  else {
    $account_form = &$form;
  }

  if (openid_connect_get_user_authname($form['#user']->uid)) {
    // Do not let the user the set a password if they are authenticated by a
    // remote service that this module supports.
    // @todo Might need to reconsider this.
    $account_form['current_pass']['#access'] = FALSE;
    $account_form['current_pass_required_values']['#value'] = array();
    $account_form['pass']['#access'] = FALSE;
  }
}

/**
 * Gets the remote authentication name of a user authenticated by this module.
 */
function openid_connect_get_user_authname($uid) {
  $authname = db_query("SELECT authname FROM {authmap} WHERE uid = :uid AND module = 'openid_connect_google'", array(':uid' => $uid))->fetchColumn(0);
  return !empty($authname) ? $authname : FALSE;
}
